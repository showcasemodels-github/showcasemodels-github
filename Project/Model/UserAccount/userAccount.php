<?php 
require_once FILE_ACCESS_CORE_CODE.'/Modules/Database/starfishDatabase.php';

class userAccount { 		private $user_account_id;	private $user_role_id;	private $user_info;	public function __get($field)	{		if(property_exists($this, $field)) return $this->{$field};			else return NULL;	}		//-------------------------------------------------------------------------------------------------		public function __set($field, $value) {		if(property_exists($this, $field)) $this->{$field} = $value;	}		
//================================================================================================//			public function setUserName($input)	{		$this->username = $input;	}		public function setPassword($input)	{		$this->password = $input;	}		public function setUserAccountID($input)	{		$this->user_account_id = $input;	}		public function getUserAccountID()	{		return $this->user_account_id;	}		public function getUserRoleID()	{		return $this->user_role_id;	}		public function getUsername()	{		return $this->username;	}		public function select()	{		try		{			$pdo_connection = starfishDatabase::getConnection();			$sql = "				SELECT					*				FROM					user_accounts				WHERE					user_account_id = :user_account_id					";			$pdo_statement = $pdo_connection->prepare($sql);			$pdo_statement->bindParam(':user_account_id', $this->user_account_id, PDO::PARAM_INT);			$pdo_statement->execute();
			$result = $pdo_statement->fetch(PDO::FETCH_ASSOC);			$this->username			=	$result['username'];			$this->password			=	$result['password'];			$this->user_role_id		=	$result['user_role_id'];		}		catch(PDOException $pdoe)		{			throw new Exception($pdoe);		}	}//================================================================================================//	public function select_login()	{		try		{			$pdo_connection = starfishDatabase::getConnection();			$sql = "SELECT						customer_id					FROM						customer_accounts					WHERE						username = :username					AND						password = :password					";			$pdo_statement = $pdo_connection->prepare($sql);			$pdo_statement->bindParam(':username', $this->username, PDO::PARAM_STR);			$pdo_statement->bindParam(':password', $this->password, PDO::PARAM_STR);			$pdo_statement->execute();
			$result = $pdo_statement->fetch();						$this->user_account_id	= $result['customer_id'];
			if($result !== FALSE)				return TRUE;			else				return FALSE;		}		catch(PDOException $pdoe)		{			throw new Exception($pdoe);		}	}//================================================================================================//		public function insert()	{		try{			$pdo_connection = starfishDatabase::getConnection();			$pdo_connection->beginTransaction();						$sql = "					INSERT INTO						user_accounts						(							`username`,							`password`,							`email`						)					VALUES						(							:username,							:password,							:email						)					";						$pdo_statement = $pdo_connection->prepare($sql);			$pdo_statement->bindParam(':username', $this->username, PDO::PARAM_STR);			$pdo_statement->bindParam(':password', $this->password, PDO::PARAM_STR);			$pdo_statement->bindParam(':email', $this->email, PDO::PARAM_STR);			$pdo_statement->execute();						$this->user_account_id = $pdo_connection->lastInsertId();			$pdo_connection->commit();					}		catch(PDOException $pdoe)		{			throw new Exception($pdoe);		}	}
/* //================================================================================================//	public function update()	{		try		{			$pdo_connection = starfishDatabase::getConnection();			$pdo_connection->beginTransaction();						$sql = "UPDATE						user_accounts					SET						photo_filename 	= :photo_filename,						first_name		= :first_name,						last_name		= :last_name,						email			= :email,						address			= :address,						country			= :country,						number			= :number					WHERE						user_account_id = :user_account_id					";						$pdo_statement = $pdo_connection->prepare($sql);			//bindParam is used so that SQL inputs are escaped.			//This is to prevent SQL injections!			$pdo_statement->bindParam(':user_account_id', $this->user_account_id, PDO::PARAM_INT);			$pdo_statement->bindParam(':photo_filename', $this->photo_filename, PDO::PARAM_STR);			$pdo_statement->bindParam(':first_name', $this->first_name, PDO::PARAM_STR);			$pdo_statement->bindParam(':last_name', $this->last_name, PDO::PARAM_STR);			$pdo_statement->bindParam(':email', $this->email, PDO::PARAM_STR);			$pdo_statement->bindParam(':address', $this->address, PDO::PARAM_STR);			$pdo_statement->bindParam(':country', $this->country, PDO::PARAM_STR);			$pdo_statement->bindParam(':number', $this->number, PDO::PARAM_STR);			$pdo_statement->execute();							$pdo_connection->commit();		}		catch(PDOException $pdoe)		{			throw new Exception($pdoe);			}	} */	//================================================================================================//	public function update_password()	{		try		{			$pdo_connection = starfishDatabase::getConnection();			$pdo_connection->beginTransaction();							$sql = "UPDATE							user_accounts						SET							password	= :password						WHERE							user_account_id = :user_account_id						";			$pdo_statement = $pdo_connection->prepare($sql);			//bindParam is used so that SQL inputs are escaped.			//This is to prevent SQL injections!			$pdo_statement->bindParam(':user_account_id', $this->user_account_id, PDO::PARAM_STR);			$pdo_statement->bindParam(':password', $this->password, PDO::PARAM_STR);			$pdo_statement->execute();				$pdo_connection->commit();		}		catch(PDOException $pdoe)		{			throw new Exception($pdoe);		}	}//================================================================================================//	public function update_online_status($is_online)	{		try		{			$pdo_connection = starfishDatabase::getConnection();			$pdo_connection->beginTransaction();							$sql = "UPDATE							user_accounts						SET							is_online	= :is_online,							last_login	= CURRENT_TIMESTAMP						WHERE							user_account_id = :user_account_id						";			$pdo_statement = $pdo_connection->prepare($sql);			//bindParam is used so that SQL inputs are escaped.			//This is to prevent SQL injections!			$pdo_statement->bindParam(':user_account_id', $this->user_account_id, PDO::PARAM_INT);			$pdo_statement->bindParam(':is_online', $is_online, PDO::PARAM_INT);			$pdo_statement->execute();				$pdo_connection->commit();		}		catch(PDOException $pdoe)		{			throw new Exception($pdoe);		}	}//================================================================================================//	public function update_photo($photo_filename)	{		try		{			$pdo_connection = starfishDatabase::getConnection();			$pdo_connection->beginTransaction();							$sql = "UPDATE							user_accounts						SET							photo_filename	= :photo_filename						WHERE							user_account_id = :user_account_id						";							$pdo_statement = $pdo_connection->prepare($sql);			//bindParam is used so that SQL inputs are escaped.			//This is to prevent SQL injections!			$pdo_statement->bindParam(':user_account_id', $this->user_account_id, PDO::PARAM_INT);			$pdo_statement->bindParam(':photo_filename', $photo_filename, PDO::PARAM_STR);			$pdo_statement->execute();				$pdo_connection->commit();		}		catch(PDOException $pdoe)		{			throw new Exception($pdoe);		}	}//================================================================================================//	public function selectCountry($user_account_id)	{		try		{			$pdo_connection = starfishDatabase::getConnection();				$sql = "SELECT							country						FROM							user_accounts						WHERE							user_account_id = :user_account_id											";			$pdo_statement = $pdo_connection->prepare($sql);			$pdo_statement->bindParam(':user_account_id', $user_account_id, PDO::PARAM_INT);			$pdo_statement->execute();				$result = $pdo_statement->fetch();				return $result;		}		catch(PDOException $pdoe)		{			throw new Exception($pdoe);		}	}		//=================================================================================================	public function select_email()	{		try		{			$pdo_connection = starfishDatabase::getConnection();				$sql = "SELECT							username, password, email, first_name, last_name						FROM							user_accounts						WHERE							username = :username						OR							email = :email						";							$pdo_statement = $pdo_connection->prepare($sql);			$pdo_statement->bindParam(':username', $this->username, PDO::PARAM_STR);			$pdo_statement->bindParam(':email', $this->email, PDO::PARAM_STR);			$pdo_statement->execute();			$result = $pdo_statement->fetch();				$this->username	= $result['username'];			$this->password	= $result['password'];			$this->email	= $result['email'];			$this->first_name	= $result['first_name'];			$this->last_name	= $result['last_name'];						}		catch(PDOException $pdoe)		{			throw new Exception($pdoe);		}		}		//=================================================================================================		public function checkUsername($username)	{		try		{			$pdo_connection = starfishDatabase::getConnection();				$sql = "SELECT							*						FROM							user_accounts						WHERE							username = :username							";				$pdo_statement = $pdo_connection->prepare($sql);			$pdo_statement->bindParam(':username', $username, PDO::PARAM_STR);			$pdo_statement->execute();			$result = $pdo_statement->fetch();				return $result;		}		catch(PDOException $pdoe)		{			throw new Exception($pdoe);		}		}		//=================================================================================================		public function checkEmail($email)	{		try		{			$pdo_connection = starfishDatabase::getConnection();				$sql = "SELECT								*							FROM								user_accounts							WHERE								email = :email								";				$pdo_statement = $pdo_connection->prepare($sql);			$pdo_statement->bindParam(':email', $email, PDO::PARAM_STR);			$pdo_statement->execute();			$result = $pdo_statement->fetch();				return $result;		}		catch(PDOException $pdoe)		{			throw new Exception($pdoe);		}		}	//=================================================================================================	public static function checkEmailIfExists($email)	{		try		{			$pdo_connection = starfishDatabase::getConnection();				$sql = "SELECT								COUNT(email) as count							FROM								user_accounts							WHERE								email = :email							";			$pdo_statement = $pdo_connection->prepare($sql);			$pdo_statement->bindParam(':email', $email, PDO::PARAM_STR);			$pdo_statement->execute();			$result = $pdo_statement->fetch();				if($result['count'] > 0)			return TRUE;				else			return FALSE;		}		catch(PDOException $pdoe)		{			throw new Exception($pdoe);		}			return FALSE;	}		
	//=================================================================================================	public function delete()	{		try		{			$pdo_connection = starfishDatabase::getConnection();			$pdo_connection->beginTransaction();							$sql = "						DELETE FROM							user_accounts						WHERE							user_account_id = :user_account_id						";							$pdo_statement = $pdo_connection->prepare($sql);			$pdo_statement->bindParam(':user_account_id', $this->user_account_id, PDO::PARAM_INT);			$pdo_statement->execute();				$pdo_connection->commit();		}		catch(PDOException $pdoe)		{			throw new Exception($pdoe);		}	}
	//=================================================================================================	//ENTERPRISE FUNCTIONS	public function selectEmployers()	{		$pdo_connection = starfishDatabase::getConnection();			$sql = "					SELECT						*					FROM						user_accounts					WHERE						`user_role_id` = 3					";			$pdo_statement = $pdo_connection->query($sql);		$results = $pdo_statement->fetchAll();			foreach($results as $result)		{			$employer = new employer();			$employer->setBusinessType($business_type);		}	}		public function updateUserAccount()	{		try		{			$pdo_connection = starfishDatabase::getConnection();			$pdo_connection->beginTransaction();				$sql = "UPDATE								user_accounts							SET								username		= :username,								photo_filename 	= :photo_filename,								first_name		= :first_name,								last_name		= :last_name,								email			= :email,								address			= :address,								country			= :country,								number			= :number							WHERE								user_account_id = :user_account_id							";				$pdo_statement = $pdo_connection->prepare($sql);			//bindParam is used so that SQL inputs are escaped.			//This is to prevent SQL injections!			$pdo_statement->bindParam(':user_account_id', $this->user_account_id, PDO::PARAM_INT);			$pdo_statement->bindParam(':username', $this->username, PDO::PARAM_STR);			$pdo_statement->bindParam(':photo_filename', $this->photo_filename, PDO::PARAM_STR);			$pdo_statement->bindParam(':first_name', $this->first_name, PDO::PARAM_STR);			$pdo_statement->bindParam(':last_name', $this->last_name, PDO::PARAM_STR);			$pdo_statement->bindParam(':email', $this->email, PDO::PARAM_STR);			$pdo_statement->bindParam(':address', $this->address, PDO::PARAM_STR);			$pdo_statement->bindParam(':country', $this->country, PDO::PARAM_STR);			$pdo_statement->bindParam(':number', $this->number, PDO::PARAM_STR);			$pdo_statement->execute();				$pdo_connection->commit();		}		catch(PDOException $pdoe)		{			throw new Exception($pdoe);		}	}				//=======================================================================================	public function select_user()	{		try		{			$pdo_connection = starfishDatabase::getConnection();				$sql = "SELECT								*							FROM								customer_accounts							WHERE								customer_id = :customer_id							";				$pdo_statement = $pdo_connection->prepare($sql);			$pdo_statement->bindParam(':customer_id', $this->customer_id, PDO::PARAM_STR);			$pdo_statement->execute();			$result = $pdo_statement->fetch();						$this->user_info = $result; 		}		catch(PDOException $pdoe)		{			throw new Exception($pdoe);		}		}	//================================================================================================//	public function insertCheckout()	{		try{			$pdo_connection = starfishDatabase::getConnection();			$pdo_connection->beginTransaction();							$sql = "						INSERT INTO							customer_checkouts							(								`customer_id`,								`product_ids`,								`product_titles`,								`product_quantities`,								`product_prices`,								`total_price`,								`checkout_status`							)						VALUES							(								:customer_id,								:product_id,								:product_title,								:product_quantities,								:product_prices,								:total_price,								'Unfinished'							)						";							$pdo_statement = $pdo_connection->prepare($sql);			$pdo_statement->bindParam(':customer_id', $this->user_account_id, PDO::PARAM_INT);			$pdo_statement->bindParam(':product_id', $this->product_id, PDO::PARAM_STR);			$pdo_statement->bindParam(':product_title', $this->product_title, PDO::PARAM_STR);			$pdo_statement->bindParam(':product_quantities', $this->product_quantities, PDO::PARAM_STR);			$pdo_statement->bindParam(':product_prices', $this->product_prices, PDO::PARAM_STR);			$pdo_statement->bindParam(':total_price', $this->total_price, PDO::PARAM_STR);			$pdo_statement->execute();							$this->user_account_id = $pdo_connection->lastInsertId();			$pdo_connection->commit();						}		catch(PDOException $pdoe)		{			throw new Exception($pdoe);		}	}	//------------------------------GET PAST TRANSACTIONS------------------------------		public function selectPastTransactions()	{		try		{			$pdo_connection = starfishDatabase::getConnection();				$sql = "SELECT									*								FROM									customer_checkouts								WHERE									customer_id = :customer_id								";				$pdo_statement = $pdo_connection->prepare($sql);			$pdo_statement->bindParam(':customer_id', $this->customer_id, PDO::PARAM_STR);			$pdo_statement->execute();			$result = $pdo_statement->fetchAll();				$this->array_of_past_transactions = $result;		}		catch(PDOException $pdoe)		{			throw new Exception($pdoe);		}		}	//------------------------GET UNFINISHED TRANSACTIONS		public function selectUnfinishedTransactions()	{		try		{			$pdo_connection = starfishDatabase::getConnection();				$sql = "SELECT										*									FROM										customer_checkouts									WHERE										customer_id = :customer_id AND										checkout_status = 'Unfinished'									";				$pdo_statement = $pdo_connection->prepare($sql);			$pdo_statement->bindParam(':customer_id', $this->customer_id, PDO::PARAM_STR);			$pdo_statement->execute();			$result = $pdo_statement->fetchAll();				$this->array_of_unfinished_transactions = $result;		}		catch(PDOException $pdoe)		{			throw new Exception($pdoe);		}		}}?>